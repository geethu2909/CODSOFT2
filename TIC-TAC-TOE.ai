import math

# Step 1: Define the game board
def create_board():
    return [[' ' for _ in range(3)] for _ in range(3)]

# Step 2: Implement the game logic
def print_board(board):
    for row in board:
        print('|'.join(row))
        print('-' * 5)

def check_winner(board, player):
    for row in board:
        if all([cell == player for cell in row]):
            return True
    for col in range(3):
        if all([board[row][col] == player for row in range(3)]):
            return True
    if all([board[i][i] == player for i in range(3)]) or all([board[i][2 - i] == player for i in range(3)]):
        return True
    return False

def check_draw(board):
    return all([cell != ' ' for row in board for cell in row])

def get_available_moves(board):
    return [(r, c) for r in range(3) for c in range(3) if board[r][c] == ' ']

def make_move(board, row, col, player):
    board[row][col] = player

def undo_move(board, row, col):
    board[row][col] = ' '

# Step 3: Implement the Minimax Algorithm with Alpha-Beta Pruning
def minimax(board, depth, is_maximizing, alpha, beta):
    if check_winner(board, 'X'):
        return -1
    if check_winner(board, 'O'):
        return 1
    if check_draw(board):
        return 0

    if is_maximizing:
        max_eval = -math.inf
        for (r, c) in get_available_moves(board):
            make_move(board, r, c, 'O')
            eval = minimax(board, depth + 1, False, alpha, beta)
            undo_move(board, r, c)
            max_eval = max(max_eval, eval)
            alpha = max(alpha, eval)
            if beta <= alpha:
                break
        return max_eval
    else:
        min_eval = math.inf
        for (r, c) in get_available_moves(board):
            make_move(board, r, c, 'X')
            eval = minimax(board, depth + 1, True, alpha, beta)
            undo_move(board, r, c)
            min_eval = min(min_eval, eval)
            beta = min(beta, eval)
            if beta <= alpha:
                break
        return min_eval

# Step 4: Implement the AI Player
def ai_move(board):
    best_score = -math.inf
    best_move = None
    for (r, c) in get_available_moves(board):
        make_move(board, r, c, 'O')
        score = minimax(board, 0, False, -math.inf, math.inf)
        undo_move(board, r, c)
        if score > best_score:
            best_score = score
            best_move = (r, c)
    make_move(board, best_move[0], best_move[1], 'O')

# Step 5: Implement the Human Player
def human_move(board):
    while True:
        move = input("Enter your move (row and column): ").split()
        if len(move) == 2 and move[0].isdigit() and move[1].isdigit():
            row, col = int(move[0]), int(move[1])
            if 0 <= row < 3 and 0 <= col < 3 and board[row][col] == ' ':
                make_move(board, row, col, 'X')
                break
        print("Invalid move. Try again.")

# Step 6: Run the Game
def play_game():
    board = create_board()
    print_board(board)
    while True:
        human_move(board)
        print_board(board)
        if check_winner(board, 'X'):
            print("You win!")
            break
        if check_draw(board):
            print("It's a draw!")
            break
        ai_move(board)
        print_board(board)
        if check_winner(board, 'O'):
            print("AI wins!")
            break
        if check_draw(board):
            print("It's a draw!")
            break

play_game()
